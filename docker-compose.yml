version: '3.8'

services:
  # Pandora Box PWA Application
  pandora-box:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: pandora-box-pwa
    restart: unless-stopped
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - PORT=3001
      - CORS_ORIGIN=*
      - JWT_SECRET=${JWT_SECRET:-your-jwt-secret-change-this}
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - DB_PATH=/app/data/pandora.db
      # External service URLs (update these to match your setup)
      - TMDB_API_KEY=${TMDB_API_KEY}
      - WATCHMODE_API_KEY=${WATCHMODE_API_KEY}
      - JACKETT_URL=${JACKETT_URL:-http://jackett:9117}
      - JACKETT_API_KEY=${JACKETT_API_KEY}
      - QBITTORRENT_URL=${QBITTORRENT_URL:-http://qbittorrent:8080}
      - QBITTORRENT_USERNAME=${QBITTORRENT_USERNAME:-admin}
      - QBITTORRENT_PASSWORD=${QBITTORRENT_PASSWORD}
      - CLOUD_COMMANDER_URL=${CLOUD_COMMANDER_URL:-http://cloudcmd:8000}
      - PORTAINER_URL=${PORTAINER_URL:-http://portainer:9000}
      - PORTAINER_API_KEY=${PORTAINER_API_KEY}
      - JELLYFIN_URL=${JELLYFIN_URL:-http://jellyfin:8096}
      - JELLYFIN_API_KEY=${JELLYFIN_API_KEY}
      # Media paths
      - MOVIES_PATH=${MOVIES_PATH:-/media/movies}
      - TV_PATH=${TV_PATH:-/media/tv}
      - DOWNLOADS_PATH=${DOWNLOADS_PATH:-/downloads}
      - TEMP_PATH=${TEMP_PATH:-/tmp}
    volumes:
      - pandora-data:/app/data
      - pandora-logs:/app/logs
      - pandora-temp:/app/temp
      - ${MEDIA_ROOT:-./media}:/media:ro
      - ${DOWNLOADS_ROOT:-./downloads}:/downloads
      - /var/run/docker.sock:/var/run/docker.sock:ro  # For Docker integration
    networks:
      - pandora-network
      - media-network
    depends_on:
      - jackett
      - qbittorrent
      - cloudcmd
      - portainer
      - jellyfin
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.pandora.rule=Host(`pandora.${DOMAIN:-localhost}`)"
      - "traefik.http.routers.pandora.tls=true"
      - "traefik.http.routers.pandora.tls.certresolver=letsencrypt"
      - "traefik.http.services.pandora.loadbalancer.server.port=3001"

  # Jackett - Torrent indexer proxy
  jackett:
    image: linuxserver/jackett:latest
    container_name: jackett
    restart: unless-stopped
    ports:
      - "9117:9117"
    environment:
      - PUID=${PUID:-1000}
      - PGID=${PGID:-1000}
      - TZ=${TZ:-UTC}
    volumes:
      - jackett-config:/config
      - ${DOWNLOADS_ROOT:-./downloads}:/downloads
    networks:
      - pandora-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.jackett.rule=Host(`jackett.${DOMAIN:-localhost}`)"

  # qBittorrent - Download client
  qbittorrent:
    image: linuxserver/qbittorrent:latest
    container_name: qbittorrent
    restart: unless-stopped
    ports:
      - "8080:8080"
      - "6881:6881"
      - "6881:6881/udp"
    environment:
      - PUID=${PUID:-1000}
      - PGID=${PGID:-1000}
      - TZ=${TZ:-UTC}
      - WEBUI_PORT=8080
    volumes:
      - qbittorrent-config:/config
      - ${DOWNLOADS_ROOT:-./downloads}:/downloads
    networks:
      - pandora-network
      - media-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.qbittorrent.rule=Host(`qbittorrent.${DOMAIN:-localhost}`)"

  # Cloud Commander - File manager
  cloudcmd:
    image: coderaiser/cloudcmd:latest
    container_name: cloudcmd
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - CLOUDCMD_ROOT=/files
    volumes:
      - ${MEDIA_ROOT:-./media}:/files/media
      - ${DOWNLOADS_ROOT:-./downloads}:/files/downloads
    networks:
      - pandora-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.cloudcmd.rule=Host(`files.${DOMAIN:-localhost}`)"

  # Portainer - Docker management
  portainer:
    image: portainer/portainer-ce:latest
    container_name: portainer
    restart: unless-stopped
    ports:
      - "9000:9000"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer-data:/data
    networks:
      - pandora-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.portainer.rule=Host(`portainer.${DOMAIN:-localhost}`)"

  # Jellyfin - Media server
  jellyfin:
    image: jellyfin/jellyfin:latest
    container_name: jellyfin
    restart: unless-stopped
    ports:
      - "8096:8096"
    environment:
      - PUID=${PUID:-1000}
      - PGID=${PGID:-1000}
      - TZ=${TZ:-UTC}
    volumes:
      - jellyfin-config:/config
      - jellyfin-cache:/cache
      - ${MEDIA_ROOT:-./media}:/media:ro
    networks:
      - pandora-network
      - media-network
    devices:
      - /dev/dri:/dev/dri  # For hardware acceleration (optional)
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.jellyfin.rule=Host(`jellyfin.${DOMAIN:-localhost}`)"

  # Gluetun - VPN client (optional but recommended)
  gluetun:
    image: qmcgaw/gluetun:latest
    container_name: gluetun
    restart: unless-stopped
    cap_add:
      - NET_ADMIN
    environment:
      - VPN_SERVICE_PROVIDER=${VPN_PROVIDER:-surfshark}
      - VPN_TYPE=${VPN_TYPE:-wireguard}
      - WIREGUARD_PRIVATE_KEY=${WIREGUARD_PRIVATE_KEY}
      - WIREGUARD_ADDRESSES=${WIREGUARD_ADDRESSES}
      - SERVER_COUNTRIES=${VPN_COUNTRIES:-Netherlands}
      - TZ=${TZ:-UTC}
    volumes:
      - gluetun-config:/gluetun
    networks:
      - pandora-network
    labels:
      - "traefik.enable=false"

  # Traefik - Reverse proxy (optional)
  traefik:
    image: traefik:v2.10
    container_name: traefik
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
      - "8081:8080"  # Traefik dashboard
    command:
      - --api.dashboard=true
      - --api.insecure=true
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --certificatesresolvers.letsencrypt.acme.httpchallenge=true
      - --certificatesresolvers.letsencrypt.acme.httpchallenge.entrypoint=web
      - --certificatesresolvers.letsencrypt.acme.email=${ACME_EMAIL:-admin@localhost}
      - --certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik-certs:/letsencrypt
    networks:
      - pandora-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.rule=Host(`traefik.${DOMAIN:-localhost}`)"

volumes:
  # Pandora Box data
  pandora-data:
    driver: local
  pandora-logs:
    driver: local
  pandora-temp:
    driver: local
  
  # Service data volumes
  jackett-config:
    driver: local
  qbittorrent-config:
    driver: local
  portainer-data:
    driver: local
  jellyfin-config:
    driver: local
  jellyfin-cache:
    driver: local
  gluetun-config:
    driver: local
  traefik-certs:
    driver: local

networks:
  pandora-network:
    driver: bridge
    name: pandora-network
  media-network:
    driver: bridge
    name: media-network